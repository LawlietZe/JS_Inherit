互联网的核心： 互联网协议(internet protocol suite)


### 至下而上

互联网五层模型：
1.应用层(application layer)
 通过TCP协议传输过来的数据类型有很多：www.email.ftp等，需要在这些数据层面做一些规范格式
 这就是应用层所做的，现在整个一以太数据是这样http://www.ruanyifeng.com/blogimg/asset/201205/bg2012052913.png

2.传输层(transport layer)
为每个一个程序分配一个端口，建立端口到端口的通信。
需要新增一个协议为数据增加端口信息，这个协议就是UDP协议。UDP协议也是有HEAD DATA组成，UDP协议以数据的形式存入IP协议的DATA部分
IP协议又是以DATA形式存入以太网数据包之中
TCP协议是UDP协议的改进版，提高了可靠性，保证了数据不丢包，如果对方收不到就会继续发送包。

3.网络层(network layer)：
同一个子网里用广播发送，整个互联网是由不同的子网络组成的，每个子网之间通过（路由）的方式进行传播。
网络层引入了标示子网络的地址（网络地址，也叫做网址），每台机器由网址和mac地址组成
规定网址的协议叫做IP协议，它所定义的地址叫做IP地址，IP协议现在分为IPV4，IPV6
举例子：172.16.254.1，由32位地址组成，前24位标示网络部分，后8位代表主机, 不同IP地址无法判断网络部分是前几位，主机部分是后几位，因为每一个
网络的规则不相同。通过“子网掩码 subnet mask” 形式上与IP地址相同，IP地址与子网掩码进行AND运算，如果相同则位于同一个子网络中。

IP协议的作用：1.分配一个IP地址 2.确定是否在子网络中。
通常情况下，对方的IP地址是已知的。
ARP协议可以找到同一子网下的mac地址，如果两台主机不在同一网络中让网关去gateway处理。
【在这个层面已经可以互联网通信】
4.链接层(link layer)：解读01的方式，规定0和1的分组方式。目前以ethernet协议作为主流, 以帧（frame）为单位，一个帧分为 Head 头 和Data 数据
 head包含着数据包的说明项，data包含需要传输的数据。
 MAC地址是每台机器的唯一标示符, 在出厂网卡上。知道传输的目标MAC地址（ARP协议）
 传播方式是通过广播
 通过定义包的结构，两台电脑的MAC地址，传输方式，2台电脑就已经可以实现通信了。
 【在这个层面已经可以搭建一个内网】。

5.实体层(physical laye)： 把电脑链接起来的物理手段。规定的是物理的电气特性，传输0,1电信号。

每一层为了实现一个功能

### 至上而下

要对另外一台PC交互，需要知道2个东西：1 mac地址  2 IP地址
------------------------------------------
场景        	    数据包地址
同一个子网络	     对方的MAC地址，对方的IP地址
非同一个子网络	   网关的MAC地址，对方的IP地址
------------------------------------------
需要上网，并配置静态IP需要做的事情
1.本机的ip地址
2.本机的子网掩码
3.网关的ip地址
4.DNS的ip地址

动态IP地址(通过DHCP协议)

模拟一个请求发送: www.google.com
1.将www.google.com 发送至DNS服务器， 由DNS协议进行解析转变为IP地址
2.利用子网掩码判断该IP是否和本机IP是在同一子网内
3.要向Google发送数据包，必须通过网关192.168.1.1转发，也就是说，接收方的MAC地址将是网关的MAC地址
4.发送数据包到google（以太数据包最大字段1500字节，会进行拆分，最终到服务器凭借成一个完整的TCP数据包）
5.google服务器以同样方式相应HTTP响应，用TCP协议发送回来。
6.本机几首到HTTP响应，显示网页，完成通讯



参考：
http://www.ruanyifeng.com/blog/2012/05/internet_protocol_suite_part_i.html 
http://www.ruanyifeng.com/blog/2012/06/internet_protocol_suite_part_ii.html
阮一峰





-------------------------------------------------------
HTTP协议 （基于TCP/IP协议的应用层协议）默认走80端口，用来规定客户端和服务器之间的通信格式。
client[Web Browser]  <----HTTP Protocol---> server[HTTP Server]
所有www文件都必须遵守这个标准(world wide web)所有页面
Web服务器: Apache, IIS, Nginx
HTTP三个特性：1.HTTP是无连接的，请求完毕后即断开 2.HTTP是媒体独立的，客户端服务器端只要MIMIE-TYPE互相知道如何处理就可以传输任何类型的数据
3.HTTP是无状态的

客户端请求消息的格式：
1.请求行 request line
2.请求头部 header
3.空行
4.请求数据

举例子：
GET /hello.txt HTTP/1.1
User-Agent: curl/7.16.3 libcurl/7.16.3 OpenSSL/0.9.7l zlib/1.2.3
Host: www.example.com
Accept-Language: en, mi

服务器响应消息
1.状态行
2.消息报头
3.空行
4.响应正文

举例子：
HTTP/1.1 200 OK
Date: Mon, 27 Jul 2009 12:28:53 GMT
Server: Apache
Last-Modified: Wed, 22 Jul 2009 19:15:56 GMT
ETag: "34aa387-d-1568eb00"
Accept-Ranges: bytes
Content-Length: 51
Vary: Accept-Encoding
Content-Type: text/plain

请求方法
GET
HEAD
POST
PUT
DELETE
CONNECT
OPTIONS
TRACE

响应头信息
Allow： 服务器支持的方法
Content-Encoding: 文档的编码encode方式
Content-length: 内容长度
Content-type: 标示后面的文档属于什么MIME类型，默认text/plain
一般表单采用的是 application/x-www-form-urlencoded ，传递过去是 键值对
流行采用  application/json， 告诉服务器传递过去的json是序列化的  '{"a":"123"}'
[注意]
ajax 中的data-type表示请求需要的数据类型 体现在Request Header中的 Accept中, content-type：对应告诉是服务器传递过去的数据是什么类型的
同样对应Requset Header中的 Content-Type 

HTTP状态码
200-请求成功
301-资源被转移
404-资源不存在
500-内部服务器错误

HTTP状态码分类
分类	分类描述
1**	信息，服务器收到请求，需要请求者继续执行操作
2**	成功，操作被成功接收并处理
3**	重定向，需要进一步的操作以完成请求
4**	客户端错误，请求包含语法错误或无法完成请求
5**	服务器错误，服务器在处理请求的过程中发生了错误










